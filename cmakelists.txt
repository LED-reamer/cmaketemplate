#define versions and compiler settings
cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
set(CMAKE_C_COMPILER gcc)
set(CMAKE_CXX_COMPILER g++)


#define out paths as /build/bin
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/bin)
set(CMAKE_SUPPRESS_REGENERATION true)
set(CMAKE_SKIP_BUILD_RPATH true)


#project name and version
project(myProjectName VERSION 1.0)

#add.cpp(and .c, ...) files to executable
file(GLOB_RECURSE SRC_FILES src/*.cpp)
#.exe
add_executable(myProjectName ${SRC_FILES})
#.lib
#add_library(myProjectName STATIC ${SRC_FILES})
#.dll
#add_library(myProjectName SHARED ${SRC_FILES})


#includes
#private to project
target_include_directories(myProjectName PRIVATE  src D:/dev/libs/graphX/include ...)
#public to other projects (if you include this library you automatically include it as well)
target_include_directories(myProjectName PUBLIC dir1 dir2)

#libraries
#search for "Engine.lib" in one of the paths (can be multiple or just all) and set it to the library variable
find_library(searchedLibVariable Engine.lib PATHS  D:/dev/libs/myLib/lib)
#link library via library variable
target_link_libraries(myProjectName PRIVATE ${searchedLibVariable})
#same PRIVATE PUBLIC logic as includes
target_link_libraries(myProjectName PUBLIC ${searchedLibVariable})


# extra: execute cmds !crossplatform!
#execute_process(COMMAND cp build/application output/application)
#execute_process(COMMAND cp -r res output/res)
#execute_process(COMMAND cp -r pythonModules output/pythonModules)
